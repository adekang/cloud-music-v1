{"version":3,"sources":["application/Singers/style.js","baseUI/horizen-item/index.tsx","application/Singers/data.tsx","application/Singers/index.tsx"],"names":["NavContainer","styled","div","ListContainer","List","style","ListItem","EnterLoading","span","Horizon","props","list","oldVal","title","handleClick","CategoryRef","useRef","useEffect","categoryDOM","current","tagElems","querySelectorAll","totalWidth","Array","from","forEach","ele","offsetWidth","width","direction","ref","map","item","className","key","onClick","name","memo","CategoryDataContext","createContext","reducer","state","action","type","set","data","Data","useReducer","fromJS","category","alpha","dispatch","Provider","value","children","Singers","singerList","pageCount","pullUpRefreshDispatch","pullDownRefreshDispatch","pullUpLoading","songsCount","pullDownLoading","enterLoading","updateDispatch","getHotSinger","updateCategory","updateAlpha","pullUpRefresh","pullDownRefresh","useState","setCategory","setAlpha","categoryTypes","val","alphaTypes","show","pullUp","pullDown","singerListJS","toJS","index","id","history","push","src","picUrl","height","alt","accountId","renderSingerList","renderRoutes","route","routes","connect","getIn","getHotSingerDispatch","getHotSingerList","changePageCount","changeEnterLoading","getSingerList","hot","count","changePullUpLoading","refreshMoreHotSingerList","refreshMoreSingerList","changePullDownLoading","React"],"mappings":"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","file":"static/js/9.18a52269.chunk.js","sourcesContent":["import styled from 'styled-components'\r\nimport style from '../../assets/global-style'\r\n\r\nexport const NavContainer = styled.div`\r\n  box-sizing: border-box;\r\n  position: fixed;\r\n  top: 95px;\r\n  width: 100%;\r\n  padding: 5px;\r\n  overflow: hidden;\r\n`\r\nexport const ListContainer = styled.div`\r\n  position: fixed;\r\n  top: 160px;\r\n  left: 0;\r\n  bottom: 0;\r\n  overflow: hidden;\r\n  width: 100%;\r\n`\r\n\r\nexport const List = styled.div`\r\n  display: flex;\r\n  margin: auto;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n\r\n  .title {\r\n    margin: 10px 0 10px 10px;\r\n    color: ${style['font-color-desc']};\r\n    font-size: ${style['font-size-s']};\r\n  }\r\n`\r\nexport const ListItem = styled.div`\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  flex-direction: row;\r\n  margin: 0 5px;\r\n  padding: 5px 0;\r\n  align-items: center;\r\n  border-bottom: 1px solid ${style['border-color']};\r\n\r\n  .img_wrapper {\r\n    margin-right: 20px;\r\n\r\n    img {\r\n      border-radius: 3px;\r\n      width: 50px;\r\n      height: 50px;\r\n    }\r\n  }\r\n\r\n  .name {\r\n    font-size: ${style['font-size-m']};\r\n    color: ${style['font-color-desc']};\r\n    font-weight: 500;\r\n  }\r\n`\r\nexport const EnterLoading = styled.div`\r\n  position: fixed;\r\n  left: 0;\r\n  right: 0;\r\n  top: 0;\r\n  bottom: 0;\r\n  width: 100px;\r\n  height: 100px;\r\n  margin: auto;\r\n`","import React, {useState, useRef, useEffect, memo} from 'react';\r\nimport styled from 'styled-components';\r\nimport Scroll from '../scroll/index';\r\nimport style from '../../assets/global-style';\r\n\r\nconst List = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  height: 30px;\r\n  overflow: hidden;\r\n\r\n  > span:first-of-type {\r\n    display: block;\r\n    flex: 0 0 auto;\r\n    padding: 5px 0;\r\n    margin-right: 5px;\r\n    color: grey;\r\n    font-size: ${style['font-size-m']};\r\n    vertical-align: middle;\r\n  }\r\n`;\r\nconst ListItem = styled.span`\r\n  flex: 0 0 auto;\r\n  font-size: ${style['font-size-m']};\r\n  padding: 5px 8px;\r\n  border-radius: 10px;\r\n\r\n  &.selected {\r\n    color: ${style['theme-color']};\r\n    border: 1px solid ${style['theme-color']};\r\n    opacity: 0.8;\r\n  }\r\n`;\r\n\r\n// 首先考虑接受的参数\r\n//list 为接受的列表数据\r\n//oldVal 为当前的 item 值\r\n//title 为列表左边的标题\r\n//handleClick 为点击不同的 item 执行的方法\r\ninterface Props {\r\n  list?: any[],\r\n  oldVal?: string,\r\n  title?: string,\r\n  handleClick?: (v: any) => void\r\n}\r\n\r\nconst Horizon: React.FC<Props> = (props) => {\r\n  const {\r\n    list = [],\r\n    oldVal = '',\r\n    title = '',\r\n    handleClick = null\r\n  } = props;\r\n\r\n  const CategoryRef = useRef<any>(null);\r\n\r\n  // 加入初始化内容宽度的逻辑\r\n  useEffect(() => {\r\n    let categoryDOM = CategoryRef.current;\r\n    let tagElems = categoryDOM.querySelectorAll('span');\r\n    let totalWidth = 0;\r\n    Array.from(tagElems).forEach(ele => {\r\n      // @ts-ignore\r\n      totalWidth += ele.offsetWidth;\r\n    });\r\n    categoryDOM.style.width = `${totalWidth}px`;\r\n  }, []);\r\n\r\n  return (\r\n    <Scroll direction={'horizontal'}>\r\n      <div ref={CategoryRef}>\r\n        <List>\r\n          <span>{title}</span>\r\n          {\r\n            list.map((item: any) => {\r\n              return (\r\n                <ListItem\r\n                  key={item.key}\r\n                  className={`${oldVal === item.key ? 'selected' : ''}`}\r\n                  onClick={() => handleClick && handleClick(item.key)}>\r\n                  {item.name}\r\n                </ListItem>\r\n              );\r\n            })\r\n          }\r\n        </List>\r\n      </div>\r\n    </Scroll>\r\n  );\r\n};\r\n\r\n\r\nexport default memo(Horizon);","import React, {createContext, useReducer} from 'react';\r\nimport {fromJS} from 'immutable';\r\n\r\n//context\r\nexport const CategoryDataContext = createContext({});\r\n\r\n// 相当于之前的 constants\r\nexport const CHANGE_CATEGORY = 'singers/CHANGE_CATEGORY';\r\nexport const CHANGE_ALPHA = 'singers/CHANGE_ALPHA';\r\n\r\n//reducer 纯函数\r\nconst reducer = (state: any, action: any) => {\r\n  switch (action.type) {\r\n    case CHANGE_CATEGORY:\r\n      return state.set('category', action.data);\r\n    case CHANGE_ALPHA:\r\n      return state.set('alpha', action.data);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n//Provider 组件\r\nexport const Data = (props: any) => {\r\n  //useReducer 的第二个参数中传入初始值\r\n  const [data, dispatch] = useReducer(reducer, fromJS({\r\n    category: '',\r\n    alpha: ''\r\n  }));\r\n  return (\r\n    <CategoryDataContext.Provider value={{data, dispatch}}>\r\n      {props.children}\r\n    </CategoryDataContext.Provider>\r\n  );\r\n};\r\n\r\n// 然后在 Singers/index.js 来运用：\r\n\r\n// 首先需要引入 useContext\r\n// 将之前的 useState 代码删除\r\n// const {data, dispatch} = useContext (CategoryDataContext);\r\n// 拿到 category 和 alpha 的值\r\n// const {category, alpha} = data.toJS ();\r\n// 而且 handleUpdatexxx 函数也要修改:\r\n\r\n//CHANGE_ALPHA 和 CHANGE_CATEGORY 变量需要从 data.js 中引入\r\n//   let handleUpdateAlpha = (val) => {\r\n//     dispatch ({type: CHANGE_ALPHA, data: val});\r\n//     updateDispatch (category, val);\r\n//   };\r\n//\r\n// let handleUpdateCatetory = (val) => {\r\n//   dispatch ({type: CHANGE_CATEGORY, data: val});\r\n//   updateDispatch (val, alpha);\r\n// };","import React, {useEffect, useState} from 'react';\r\nimport {alphaTypes, categoryTypes} from '../../api/config';\r\nimport Horizon from '../../baseUI/horizen-item';\r\nimport Scroll from '../../baseUI/scroll';\r\nimport {\r\n  NavContainer,\r\n  ListContainer,\r\n  List,\r\n  ListItem\r\n} from './style';\r\nimport Loading from '../../baseUI/loading';\r\nimport {renderRoutes} from 'react-router-config';\r\nimport {connect} from 'react-redux';\r\nimport {\r\n  getSingerList,\r\n  getHotSingerList,\r\n  changeEnterLoading,\r\n  changePageCount,\r\n  refreshMoreSingerList,\r\n  changePullUpLoading,\r\n  changePullDownLoading,\r\n  refreshMoreHotSingerList\r\n} from './store/actionCreators';\r\nimport {Data} from './data';\r\n\r\n// 渲染函数，返回歌手列表\r\n\r\nconst Singers = (props: any) => {\r\n\r\n  const {\r\n    singerList,\r\n    pageCount,\r\n    pullUpRefreshDispatch,\r\n    pullDownRefreshDispatch,\r\n    songsCount,\r\n    pullUpLoading,\r\n    pullDownLoading,\r\n    enterLoading\r\n  } = props;\r\n\r\n  const {updateDispatch, getHotSinger, updateCategory, updateAlpha, pullUpRefresh, pullDownRefresh} = props;\r\n\r\n  let [category, setCategory] = useState('1001');\r\n  let [alpha, setAlpha] = useState('');\r\n\r\n  let handleUpdateAlpha = (val: string) => {\r\n    setAlpha(val);\r\n    updateDispatch(category, val);\r\n  };\r\n\r\n  useEffect(() => {\r\n    updateDispatch('1001', alpha);\r\n  }, []);\r\n\r\n  let handleUpdateCategory = (val: string) => {\r\n    setCategory(val);\r\n    updateDispatch(val, alpha);\r\n  };\r\n\r\n  const handlePullUp = () => {\r\n    pullUpRefreshDispatch(category, alpha, category === '', pageCount);\r\n  };\r\n\r\n  const handlePullDown = () => {\r\n    pullDownRefreshDispatch(category, alpha);\r\n  };\r\n  const enterDetail = (id: number) => {\r\n    props.history.push(`/singers/${id}`);\r\n  };\r\n\r\n  const renderSingerList = () => {\r\n    const {singerList} = props;\r\n    const singerListJS = singerList ? singerList.toJS() : [];\r\n    return (\r\n      <List>\r\n        {\r\n          singerListJS.map((item: { id: number; accountId: string; picUrl: any; name: boolean | React.ReactChild | React.ReactFragment | React.ReactPortal | null | undefined; }, index: string) => {\r\n            return (\r\n              <ListItem key={item.accountId + '' + index} onClick={() => enterDetail(item.id)}>\r\n                <div className=\"img_wrapper\">\r\n                  <img src={`${item.picUrl}?param=300x300`} width=\"100%\" height=\"100%\" alt=\"music\"/>\r\n                </div>\r\n                <span className=\"name\">{item.name}</span>\r\n              </ListItem>\r\n            );\r\n          })\r\n        }\r\n      </List>\r\n    );\r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Data>\r\n        <NavContainer>\r\n          <Horizon list={categoryTypes}\r\n                   title={'分类 (默认热门):'}\r\n                   handleClick={handleUpdateCategory}\r\n                   oldVal={category}/>\r\n          <Horizon list={alphaTypes}\r\n                   title={'首字母:'}\r\n                   handleClick={handleUpdateAlpha}\r\n                   oldVal={alpha}\r\n          />\r\n        </NavContainer>\r\n        <ListContainer>\r\n          <Loading show={enterLoading}/>\r\n          <Scroll\r\n            pullUp={handlePullUp}\r\n            pullDown={handlePullDown}\r\n            pullUpLoading={pullUpLoading}\r\n            pullDownLoading={pullDownLoading}\r\n          >\r\n            {renderSingerList()}\r\n          </Scroll>\r\n        </ListContainer>\r\n      </Data>\r\n      {renderRoutes(props.route.routes)}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: { getIn: (arg0: string[]) => any; }) => ({\r\n  singerList: state.getIn(['singers', 'singerList']),\r\n  enterLoading: state.getIn(['singers', 'enterLoading']),\r\n  pullUpLoading: state.getIn(['singers', 'pullUpLoading']),\r\n  pullDownLoading: state.getIn(['singers', 'pullDownLoading']),\r\n  pageCount: state.getIn(['singers', 'pageCount'])\r\n});\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    getHotSingerDispatch() {\r\n      dispatch(getHotSingerList());\r\n    },\r\n    updateDispatch(category: any, alpha: any) {\r\n      dispatch(changePageCount(0));//由于改变了分类，所以pageCount清零\r\n      dispatch(changeEnterLoading(true));//loading，现在实现控制逻辑，效果实现放到下一节，后面的loading同理\r\n      dispatch(getSingerList(category, alpha));\r\n    },\r\n    // 滑到最底部刷新部分的处理\r\n    pullUpRefreshDispatch(category: any, alpha: any, hot: any, count: number) {\r\n      dispatch(changePullUpLoading(true));\r\n      dispatch(changePageCount(count + 1));\r\n      if (hot) {\r\n        dispatch(refreshMoreHotSingerList());\r\n      } else {\r\n        dispatch(refreshMoreSingerList(category, alpha));\r\n      }\r\n    },\r\n    //顶部下拉刷新\r\n    pullDownRefreshDispatch(category: string, alpha: string) {\r\n      dispatch(changePullDownLoading(true));\r\n      dispatch(changePageCount(0));//属于重新获取数据\r\n      if (category === '' && alpha === '') {\r\n        dispatch(getHotSingerList());\r\n      } else {\r\n        dispatch(getSingerList(category, alpha));\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(React.memo(Singers));\r\n"],"sourceRoot":""}